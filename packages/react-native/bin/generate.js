const path = require('path');

/**
 * Metro bundler configuration
 *
 *  @returns {String} Metro JSON configuration
 *  @private
 */
function metroConfig() {
  const root = path.resolve(__dirname, '..');

  return JSON.stringify({ //eslint-disable-line
    watchFolders: [
      process.cwd()
    ],
    resolver: {
      extraNodeModules: {
        '@babel/runtime': path.resolve(root, 'node_modules', '@babel', 'runtime'),
        'react-native': path.resolve(root, 'node_modules', 'react-native'),
        'react': path.resolve(root, 'node_modules', 'react')
      }
    }
  }, null, 2);
}

/**
 *  Entry file for storybook stories.
 *
 *  @param {String} entry path to entry file
 *  @returns {String} file content
 *  @private
 */
function entryFile(entry) {
  const pjson = require(path.resolve(process.cwd(), 'package.json'));
  const examples = path.join(pjson.name, entry);

  return `
/**
 * Auto-generated by @exemplar/native-storybook. Do not modify this file directly.
 */

import React from 'react';
import { storiesOf } from '@storybook/react-native';
import examples from '${examples}';

const story = storiesOf('Exemplar', module);

examples.forEach(example => story.add(example.title, () => <example.Component />));
`;
}

/**
 * Data from generate.
 *
 * @typedef {Object} Exemplar
 * @property {String} entry Entry file content
 * @property {String} metro Metro bundler JSON configuration
 */

/**
 * Generate config and content for storybook.
 *
 * @param {String} entry path to stories or React examples, defaults to `[module.name]/examples/index.native.js`
 * @returns {Exemplar} Generated content and configuration
 * @public
 */
module.exports = function generate(entry = path.join('examples', 'index.native.js')) {
  return {
    entry: entryFile(entry),
    metro: metroConfig()
  };
};
